package io.github.qudtlib;

import static io.github.qudtlib.Qudt.correspondingUnitsInSystem;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import io.github.qudtlib.model.SystemOfUnits;
import io.github.qudtlib.model.SystemsOfUnits;
import io.github.qudtlib.model.Unit;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class SystemOfUnitsTests {

    @Test
    public void testMetreInSI() {
        Unit metre = Qudt.Units.M;
        Assertions.assertFalse(metre.getUnitOfSystems().isEmpty());
        assertTrue(
                metre.getUnitOfSystems().stream()
                        .anyMatch(s -> s.getAbbreviation().orElse("no abbrev").equals("SI")));
    }

    @Test
    public void testSIBaseUnits() {
        SystemOfUnits si = Qudt.SystemsOfUnits.SI;
        assertTrue(si.getBaseUnits().contains(Qudt.Units.M));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.KiloGM));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.A));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.SEC));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.CD));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.MOL));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.UNITLESS));
        assertTrue(si.getBaseUnits().contains(Qudt.Units.K));
        Assertions.assertEquals(8, si.getBaseUnits().size());
    }

    @Test
    @Disabled
    public void testSIRelatedUnits() {
        Set<Unit> explicitlyAssociated =
                Qudt.getUnitsMap().values().stream()
                        .filter(
                                u ->
                                        u.getUnitOfSystems().contains(SystemsOfUnits.SI)
                                                || SystemsOfUnits.SI.hasBaseUnit(u))
                        .collect(Collectors.toSet());
        Set<Unit> implicitlyAssociated =
                Qudt.getUnitsMap().values().stream()
                        .filter(u -> SystemsOfUnits.SI.allowsUnit(u))
                        .collect(Collectors.toSet());
        Set<Unit> onlyImplicit = new HashSet<>(implicitlyAssociated);
        onlyImplicit.removeAll(explicitlyAssociated);
        System.out.println("\n\nimplicitly assocated with sou:SI");
        System.out.println(
                implicitlyAssociated.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));
        System.out.println("\n\nexplicitly assocated with sou:SI");
        System.out.println(
                explicitlyAssociated.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));

        System.out.println("\n\nonly implicitly assocated with sou:SI");
        System.out.println(
                onlyImplicit.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));
    }

    @Test
    @Disabled
    public void testGenerateSystemOfUnitTriples() {
        System.out.println(
                String.format(
                        "@prefix %s: <%s> .",
                        Qudt.NAMESPACES.unit.getAbbreviationPrefix(),
                        Qudt.NAMESPACES.unit.getBaseIri()));
        System.out.println(
                String.format(
                        "@prefix %s: <%s> .",
                        Qudt.NAMESPACES.systemOfUnits.getAbbreviationPrefix(),
                        Qudt.NAMESPACES.systemOfUnits.getBaseIri()));
        System.out.println(
                String.format(
                        "@prefix %s: <%s> .",
                        Qudt.NAMESPACES.qudt.getAbbreviationPrefix(),
                        Qudt.NAMESPACES.qudt.getBaseIri()));
        for (SystemOfUnits sou : Qudt.allSystemsOfUnits()) {
            for (Unit unit : Qudt.allUnits()) {
                if (sou.allowsUnit(unit)) {
                    System.out.println(
                            String.format(
                                    "%s %s %s .",
                                    Qudt.NAMESPACES.unit.abbreviate(unit.getIri()),
                                    "qudt:isUnitOfSystem",
                                    Qudt.NAMESPACES.systemOfUnits.abbreviate(sou.getIri())));
                }
            }
        }
    }

    @Test
    @Disabled
    public void testImperialRelatedUnits() {
        Set<Unit> explicitlyAssociated =
                Qudt.getUnitsMap().values().stream()
                        .filter(
                                u ->
                                        u.getUnitOfSystems().contains(SystemsOfUnits.IMPERIAL)
                                                || SystemsOfUnits.IMPERIAL.hasBaseUnit(u))
                        .collect(Collectors.toSet());
        Set<Unit> implicitlyAssociated =
                Qudt.getUnitsMap().values().stream()
                        .filter(u -> SystemsOfUnits.IMPERIAL.allowsUnit(u))
                        .collect(Collectors.toSet());
        Set<Unit> onlyImplicit = new HashSet<>(implicitlyAssociated);
        onlyImplicit.removeAll(explicitlyAssociated);
        System.out.println("\n\nimplicitly assocated with sou:IMPERIAL");
        System.out.println(
                implicitlyAssociated.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));
        System.out.println("\n\nexplicitly assocated with sou:IMPERIAL");
        System.out.println(
                explicitlyAssociated.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));

        System.out.println("\n\nonly implicitly assocated with sou:IMPERIAL");
        System.out.println(
                onlyImplicit.stream()
                        .map(u -> Qudt.NAMESPACES.unit.abbreviate(u.getIri()))
                        .sorted()
                        .collect(Collectors.joining(", ")));
    }

    @Test
    public void testFindSIConversionBaseUnit() {
        assertEquals(
                Qudt.Units.CentiM,
                Qudt.correspondingUnitInSystem(Qudt.Units.IN, Qudt.SystemsOfUnits.SI).get());
        assertEquals(
                Qudt.Units.DeciM,
                Qudt.correspondingUnitInSystem(Qudt.Units.FT, Qudt.SystemsOfUnits.SI).get());
        assertEquals(
                Qudt.Units.DeciM2,
                Qudt.correspondingUnitInSystem(Qudt.Units.FT2, Qudt.SystemsOfUnits.SI).get());
        assertEquals(
                Qudt.Units.K,
                Qudt.correspondingUnitInSystem(Qudt.Units.DEG_F, Qudt.SystemsOfUnits.SI).get());
        assertEquals(
                Qudt.Units.MilliRAD,
                Qudt.correspondingUnitInSystem(Qudt.Units.DEG, Qudt.SystemsOfUnits.SI).get());
    }

    @Test
    @Disabled
    public void testCorrespondingSIUnitsForImperial() {
        Set<Unit> imperialUnits =
                Qudt.getUnitsMap().values().stream()
                        .filter(u -> SystemsOfUnits.IMPERIAL.allowsUnit(u))
                        .collect(Collectors.toSet());
        for (Unit toReplace : imperialUnits) {
            List<Unit> siUnitsToUse = correspondingUnitsInSystem(toReplace, Qudt.SystemsOfUnits.SI);
            System.out.println(
                    String.format(
                            "Replacing imperial unit %s (m:%s) with SI units %s ",
                            toReplace,
                            toReplace.getConversionMultiplier().get(),
                            siUnitsToUse.stream()
                                    .map(
                                            u ->
                                                    String.format(
                                                            "%s (m:%s)",
                                                            u.toString(),
                                                            u.getConversionMultiplier()
                                                                    .orElse(new BigDecimal("1.0"))
                                                                    .toString()))
                                    .collect(Collectors.joining(",", "[", "]"))));
        }
    }

    @Test
    public void testSIUnits() {
        Set<String> siUnitIris =
                Qudt.getUnitsMap().values().stream()
                        .filter(u -> SystemsOfUnits.SI.allowsUnit(u))
                        .map(Unit::getIri)
                        .collect(Collectors.toSet());
        // no longer true in 2.1.25
        // assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A_Ab")));
        // assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A_Ab-CentiM2")));
        // assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A_Ab-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-M2-PER-J-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-DEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-J")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-M2-K2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-MilliM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:A-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AT")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AT-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AU")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AttoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AttoFARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AttoJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:AttoJ-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:BQ-SEC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-M2-PER-V")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-KiloGM-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-MilliM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C-PER-MilliM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C2-M-PER-J")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C3-M-PER-J2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:C4-M4-PER-J3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CD-PER-LM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CD-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-PER-KiloYR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM-SEC-DEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM2-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM2-PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM2-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-MOL-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiM3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:CentiN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DAY_Sidereal")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-KiloGM-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-PER-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C-WK")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DEG_C2-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DecaPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciL-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciM3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciTONNE")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:DeciTON_Metric")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:EV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:EV-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:EV-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:EV-PER-T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:EV-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:E_h")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:ElementaryCharge")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:ExaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:ExaJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FARAD-PER-KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FARAD-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:FemtoMOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-CentiM2-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-DEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-DeciM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GRAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GRAY-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaEV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaHZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaHZ-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:GigaW-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:H")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:H-PER-KiloOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:H-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:H-PER-OHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HR_Sidereal")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HZ-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HZ-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HZ-PER-T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HZ-PER-V")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoPA-L-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoPA-M3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoPA-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:HectoPA-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-M-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-M2-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-CentiM2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-KiloGM-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-KiloGM-K-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-KiloGM-K-PA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-M3-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-M4")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-MOL-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-PER-T2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:J-SEC-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-M-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-M-PER-W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-M2-PER-KiloGM-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PA-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-PER-W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:K2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KAT")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloA-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloA-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloA-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloC-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloEV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloEV-PER-MicroM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-M-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-M2-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-MilliM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-DeciM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-KiloM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-KiloMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M2-PA-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M2-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-M3-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-SEC-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloGM2-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloHZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloHZ-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloJ-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloJ-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloJ-PER-KiloGM-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloJ-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloL-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloM3-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloMOL-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloN-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloPA-M2-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloPA-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloPA-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloTONNE")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloTON_Metric")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloV-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloV-A-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloV-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloW-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloW-HR-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloWB")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloWB-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:KiloYR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-MicroMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:L-PER-SEC-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:LM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:LM-PER-W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:LM-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:LUX")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:LUX-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-K-PER-W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-FARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M-PER-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-HZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-HZ2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-HZ3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-HZ4")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-K-PER-W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-HZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-HZ2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-J")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-N")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-SR-J")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-PER-V-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-SEC-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M2-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-KiloGM-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M3-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M4")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M4-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M5")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:M6")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MIN_Sidereal")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MO")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-DEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-DeciM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-GM-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-KiloGM-PA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2-SEC-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2-SEC-M-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M2-SEC-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-M3-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MOL-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaA-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaC-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaEV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaEV-FemtoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaEV-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaGM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaHZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaHZ-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaHZ-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaHZ-PER-T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaJ-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaPA-L-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaPA-M3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaPA-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaV-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaV-A-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaV-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaW-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MegaYR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroBQ-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroBQ-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroC-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroFARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroFARAD-PER-KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroFARAD-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-L-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-M3-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroGRAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroH")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroH-PER-KiloOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroH-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroH-PER-OHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM-PER-L-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM-PER-N")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM3-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroM3-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-GM-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-GM-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-L-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-M2-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-MOL")));
        assertTrue(
                siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-MicroMOL-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroMOL-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroRAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroS-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroSV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroSV-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroT")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroV-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MicroW-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliA-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliA-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliBQ-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliBQ-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliBQ-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliBQ-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliC-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliC-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliDEG_C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliFARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-DeciL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M2-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M3-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M3-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-M3-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliGRAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliH")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliH-PER-KiloOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliH-PER-OHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-CentiM2-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-CentiM2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliL-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM-PER-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM2-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM3-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliM4")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-M3-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliMOL-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliN-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliN-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliPA-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliRAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliS-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliSV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliT")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliV-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliV-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliW")));
        assertTrue(
                siUnitIris.contains(
                        Qudt.NAMESPACES.unit.expand("unit:MilliW-PER-CentiM2-MicroM-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliW-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliW-PER-M2-NanoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliW-PER-M2-NanoM-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:MilliWB")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-M-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-SEC-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M-SEC-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M2-PER-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-M2-PER-KiloGM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-C")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-MilliM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-SEC-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-SEC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:N-SEC-PER-RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NP")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoBQ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoBQ-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoFARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoFARAD-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-M2-PA-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-MicroL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoGM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoH")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoH-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoM")));
        assertTrue(
                siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoM-PER-MilliM-MegaPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-CentiM3-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-GM-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-L-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-L-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-MicroGM-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-MicroMOL")));
        assertTrue(
                siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoMOL-PER-MicroMOL-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoS-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoT")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:NanoW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:OHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:OHM-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:OHM-M2-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-L-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-M-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-M-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-M3-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-SEC-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA-SEC-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA2-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PA2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-CentiM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-GigaEV2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-H")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-J-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-KiloV-A-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M-NanoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M-NanoM-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M2-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-M3-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MO")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MicroM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MicroMOL-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MilliM3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-MilliSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-NanoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-PA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-PA-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-PicoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SEC-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SEC-M2-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SEC-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-T-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-T-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-WB")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-WK")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PER-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PetaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PetaJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoA-PER-MicroMOL-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoFARAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoFARAD-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoGM-PER-GM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoGM-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoGM-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoGM-PER-MilliL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoH")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-L-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-L-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-M-W-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-M2-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoMOL-PER-M3-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoPA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoPA-PER-KiloM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoS-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoW-PER-CentiM2-L")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:PicoW-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:R")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-M2-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-M2-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:RAD-PER-SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:S")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:S-M2-PER-MOL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:S-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:S-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SEC-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SEC-PER-RAD-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SEC2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:SV")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:T")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:T-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:T-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-HA-YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TONNE-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Assay")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-DAY")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-HA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-MIN")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TON_Metric-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraHZ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraJ")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraOHM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraW")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:TeraW-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:UNITLESS")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-A")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-A-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-CentiM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-MicroSEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-PER-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V-SEC-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:V2-PER-K2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-HR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-HR-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-M-PER-M2-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-M2-PER-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-CentiM2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-KiloGM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-K")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-K4")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-M-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-NanoM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-NanoM-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-PA")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M2-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-M3")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-PER-SR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-SEC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:W-SEC-PER-M2")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:WB")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:WB-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:WB-PER-M")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:WB-PER-MilliM")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:WK")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:YR")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:YR_Sidereal")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:YR_TROPICAL")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:YoctoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:YottaC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:ZeptoC")));
        assertTrue(siUnitIris.contains(Qudt.NAMESPACES.unit.expand("unit:ZettaC")));
    }
}
